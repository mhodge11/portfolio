{
  "DB Zod": {
    "prefix": "dbzod",
    "description": "Generate zod template for a db model",
    "scope": "typescript",
    "isFileTemplate": true,
    "body": [
      "import { createInsertSchema, createSelectSchema } from 'drizzle-zod';",
      "import { z } from 'zod';",
      "",
      "import { ${TM_FILENAME_BASE} } from '@/server/db/schema';",
      "",
      "export const insert${1}Schema = createInsertSchema(${TM_FILENAME_BASE});",
      "export const select${1}Schema = createSelectSchema(${TM_FILENAME_BASE});",
      "",
      "export const ${TM_FILENAME_BASE}RouterSchema = {",
      "  insert: insert${1}Schema.extend({",
      "    id: z.string().length(12).optional(),",
      "    owner: z.string().max(50).optional(),",
      "  }),",
      "  get: z.object({",
      "    id: z.string().length(12),",
      "  }),",
      "  update: z.object({",
      "    id: z.string().length(12),",
      "    owner: z.string().max(50).optional(),",
      "  }),",
      "};",
      ""
    ]
  },
  "DB Table": {
    "prefix": "dbtable",
    "description": "Generate table template for a db model",
    "scope": "typescript",
    "isFileTemplate": true,
    "body": [
      "import { mysqlTable, varchar } from 'drizzle-orm/mysql-core';",
      "import { type InferModel } from 'drizzle-orm';",
      "",
      "import nanoid from '@/server/db/nanoid';",
      "",
      "export const ${TM_FILENAME_BASE} = mysqlTable('${TM_FILENAME_BASE}', {",
      "  id: nanoid('id', {}).notNull().primaryKey(),",
      "  owner: varchar('owner', { length: 50 }),",
      "});",
      "",
      "export type ${1} = InferModel<typeof ${TM_FILENAME_BASE}>;",
      "export type New${1} = InferModel<typeof ${TM_FILENAME_BASE}, 'insert'>;",
      ""
    ]
  },
  "API Router": {
    "prefix": "apirouter",
    "description": "Generate api router template for a db model",
    "scope": "typescript",
    "isFileTemplate": true,
    "body": [
      "import { eq, and } from 'drizzle-orm';",
      "",
      "import { createTRPCRouter, protectedProcedure } from '@/server/api/trpc';",
      "import { ${TM_FILENAME_BASE}, type New${1}, type ${1} } from '@/server/db/schema';",
      "import createId from '@/utils/createId';",
      "import { ${TM_FILENAME_BASE}RouterSchema } from '@/zods/${TM_FILENAME_BASE}';",
      "",
      "export const ${TM_FILENAME_BASE}Router = createTRPCRouter({",
      "  insert: protectedProcedure",
      "    .input(${TM_FILENAME_BASE}RouterSchema.insert)",
      "    .mutation(({ ctx, input }) => {",
      "      const org_id = ctx.auth.orgId;",
      "      if (!org_id) throw new Error('Must be logged in to create ${1}');",
      "",
      "      return ctx.db",
      "        .insert(${TM_FILENAME_BASE})",
      "        .values({ id: createId(), org_id, ...input } as New${1});",
      "    }),",
      "  list: protectedProcedure.query(async ({ ctx }) => {",
      "    const org_id = ctx.auth.orgId;",
      "    if (!org_id) throw new Error('Must be logged in to create ${1}');",
      "",
      "    const results = await ctx.db",
      "      .select()",
      "      .from(${TM_FILENAME_BASE})",
      "      .where(eq(${TM_FILENAME_BASE}.org_id, org_id));",
      "    return results;",
      "  }),",
      "  get: protectedProcedure",
      "    .input(${TM_FILENAME_BASE}RouterSchema.get)",
      "    .query(async ({ ctx, input }) => {",
      "      const org_id = ctx.auth.orgId;",
      "      if (!org_id) throw new Error('Must be logged in to create ${1}');",
      "",
      "      const results = await ctx.db",
      "        .select()",
      "        .from(${TM_FILENAME_BASE})",
      "        .where(and(eq(${TM_FILENAME_BASE}.id, input.id), eq(${TM_FILENAME_BASE}.id, org_id)));",
      "      return results[0];",
      "    }),",
      "  update: protectedProcedure",
      "    .input(${TM_FILENAME_BASE}RouterSchema.update)",
      "    .mutation(async ({ ctx, input }) => {",
      "      const org_id = ctx.auth.orgId;",
      "      if (!org_id) throw new Error('Must be logged in to create ${1}');",
      "",
      "      return ctx.db",
      "        .update(${TM_FILENAME_BASE})",
      "        .set(input as ${1})",
      "        .where(and(eq(${TM_FILENAME_BASE}.id, input.id), eq(${TM_FILENAME_BASE}.org_id, org_id)));",
      "    }),",
      "  delete: protectedProcedure",
      "    .input(${TM_FILENAME_BASE}RouterSchema.get)",
      "    .mutation(async ({ ctx, input }) => {",
      "      const org_id = ctx.auth.orgId;",
      "      if (!org_id) throw new Error('Must be logged in to create ${1}');",
      "",
      "      return ctx.db",
      "        .delete(${TM_FILENAME_BASE})",
      "        .where(and(eq(${TM_FILENAME_BASE}.id, input.id), eq(${TM_FILENAME_BASE}.org_id, org_id)));",
      "    }),",
      "});",
      "",
      "// CRUD Naming",
      "// insert",
      "// list",
      "// get",
      "// update",
      "// delete",
      ""
    ]
  }
}
